name: Build updates.json (Python — Council site + Rules + City Record + NYS Register + NYS DOL)

on:
  schedule:
    - cron: "17 13 * * *"   # daily ~9:17am ET
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build updates.json via Python
        run: |
          python - << 'PY'
          import json, re, ssl, sys, time, os, urllib.parse, urllib.request

          UA = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/124.0.0.0 Safari/537.36")

          os.makedirs("debug", exist_ok=True)
          NOW = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())

          def fetch_text(url, accept="*/*", timeout=40):
            try:
              ctx = ssl.create_default_context()
              req = urllib.request.Request(url, headers={"accept": accept, "user-agent": UA})
              with urllib.request.urlopen(req, context=ctx, timeout=timeout) as r:
                raw = r.read().decode("utf-8", errors="replace")
              print(f"[fetch_text] {url} -> {len(raw)} bytes", flush=True)
              return raw
            except Exception as e:
              print(f"[fetch_text] ERROR {url}: {e}", file=sys.stderr, flush=True)
              return ""

          def clean_text(html):
            text = re.sub(r"<[^>]+>", " ", html)
            text = re.sub(r"\s+", " ", text).strip()
            return text

          def item(_id, source, title, date, url, tags=None):
            return {
              "id": _id,
              "source": source,
              "title": (title or "").strip()[:300],
              "date": date,
              "url": url,
              "tags": (tags or [])
            }

          # ---- A) NYC Council (site HTML) ----
          def pull_council_site():
            base = "https://council.nyc.gov"
            html = fetch_text(base + "/legislation/")
            if not html: 
              return []
            open("debug/nyc_council_site_raw.html","w",encoding="utf-8").write(html[:30000])

            # Get links that live under /legislation/ and look like bills/items
            out = []
            # capture anchors with some text inside
            for m in re.finditer(r'<a[^>]+href="([^"]*?/legislation/[^"?#]+)"[^>]*>([^<]{6,200})</a>', html, re.I):
              href = m.group(1).strip()
              title = re.sub(r"\s+", " ", m.group(2)).strip()
              if not title: 
                continue
              # Normalize href
              if href.startswith("//"): href = "https:" + href
              if href.startswith("/"): href = urllib.parse.urljoin(base, href)
              if "/search" in href or "#respond" in href: 
                continue
              out.append(item(f"nycc-site-{len(out)}-{int(time.time())}", "NYC Council", title, NOW, href, ["NYC","Council"]))
              if len(out) >= 25: 
                break

            json.dump(out[:5], open("debug/nyc_council_site_preview.json","w",encoding="utf-8"), indent=2)
            print(f"[NYC Council (site)] {len(out)}")
            return out

          # ---- B) NYC Rules (homepage heuristic) ----
          def pull_nyc_rules():
            html = fetch_text("https://rules.cityofnewyork.us/")
            if not html: return []
            open("debug/nyc_rules_raw.html","w",encoding="utf-8").write(html[:30000])
            text = clean_text(html)
            chunks = re.split(r"(Proposed Rule|Adopted Rule|Notice of Public Hearing)", text)
            out = []
            for i in range(1, min(len(chunks), 30), 2):
              head = chunks[i]
              body = chunks[i+1] if i+1 < len(chunks) else ""
              title = f"{head}: {body[:120]}…"
              out.append(item(f"nycr-{i}-{int(time.time())}", "NYC Rules", title, NOW,
                              "https://rules.cityofnewyork.us/", ["NYC","Rules"]))
            json.dump(out[:5], open("debug/nyc_rules_preview.json","w",encoding="utf-8"), indent=2)
            print(f"[NYC Rules] {len(out)}")
            return out

          # ---- C) City Record ----
          def pull_city_record():
            html = fetch_text("https://a856-cityrecord.nyc.gov/")
            if not html: return []
            open("debug/city_record_raw.html","w",encoding="utf-8").write(html[:30000])
            text = clean_text(html)
            out = []
            for line in re.split(r"[\\n\\.]", text):
              line = line.strip()
              if not line: 
                continue
              if re.search(r"(DCWP|DCA|DOL|wage|employment|labor|sick|leave|retaliation|schedule|hearing)", line, re.I):
                out.append(item(f"crol-{len(out)}-{int(time.time())}",
                                "City Record", line[:140]+"…", NOW,
                                "https://a856-cityrecord.nyc.gov/", ["NYC","Notices"]))
                if len(out) >= 12: break
            json.dump(out[:5], open("debug/city_record_preview.json","w",encoding="utf-8"), indent=2)
            print(f"[City Record] {len(out)}")
            return out

          # ---- D) NYS Register ----
          def pull_nys_register():
            html = fetch_text("https://dos.ny.gov/state-register")
            if not html: return []
            open("debug/nys_register_raw.html","w",encoding="utf-8").write(html[:30000])
            text = clean_text(html)
            out = []
            for line in re.split(r"[\\n\\.]", text):
              line = line.strip()
              if not line: continue
              if re.search(r"(labor|employment|wage|salary|sick|leave|retaliation|schedule|minimum wage)", line, re.I):
                out.append(item(f"nysr-{len(out)}-{int(time.time())}", "NYS Register",
                                line[:140]+"…", NOW, "https://dos.ny.gov/state-register",
                                ["NYS","Rulemaking"]))
                if len(out) >= 12: break
            json.dump(out[:5], open("debug/nys_register_preview.json","w",encoding="utf-8"), indent=2)
            print(f"[NYS Register] {len(out)}")
            return out

          # ---- E) NYS DOL News ----
          def pull_nys_dol():
            html = fetch_text("https://dol.ny.gov/news")
            if not html: return []
            open("debug/nys_dol_raw.html","w",encoding="utf-8").write(html[:30000])
            out = []
            for m in re.finditer(r'<a[^>]+href="(/news/[^"#]+)"[^>]*>([^<]{8,160})</a>', html, re.I):
              href = "https://dol.ny.gov" + m.group(1)
              title = re.sub(r"\s+", " ", m.group(2)).strip()
              out.append(item(f"nysdol-{len(out)}-{int(time.time())}", "NYS DOL", title, NOW, href, ["NYS","News"]))
              if len(out) >= 10: break
            json.dump(out[:5], open("debug/nys_dol_preview.json","w",encoding="utf-8"), indent=2)
            print(f"[NYS DOL] {len(out)}")
            return out

          # ---- Aggregate ----
          all_items = []
          for pull in (pull_council_site, pull_nyc_rules, pull_city_record, pull_nys_register, pull_nys_dol):
            try:
              all_items += pull()
            except Exception as e:
              print("[SOURCE ERROR]", pull.__name__, e, file=sys.stderr)

          # De-dup (source, title)
          seen, out = set(), []
          for it in all_items:
            key = (it["source"], it["title"])
            if key in seen: continue
            seen.add(key); out.append(it)

          if not out:
            out = [
              {"id":"ex1","source":"NYC Council","title":"(Example) Amend Safe and Sick Time Act",
               "date":"2025-09-20","url":"https://council.nyc.gov/legislation/","tags":["NYC","Leave"]},
              {"id":"ex2","source":"NYC Rules","title":"(Example) Proposed payroll record rule",
               "date":"2025-09-18","url":"https://rules.cityofnewyork.us/","tags":["NYC","Records"]}
            ]

          try: out.sort(key=lambda x: x.get("date",""), reverse=True)
          except: pass

          with open("updates.json","w",encoding="utf-8") as f:
            json.dump(out, f, indent=2)
          print(f"[write] updates.json with {len(out)} items", flush=True)
          PY

      - name: Commit updates.json + debug if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add updates.json debug/*
            git commit -m "chore: update updates.json (council site + other sources)"
            git push
          else
            echo "No changes to commit."
          fi
