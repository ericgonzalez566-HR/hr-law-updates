name: Build updates.json (Python, no deps)

on:
  schedule:
    - cron: "17 13 * * *"   # daily ~9:17am ET
  workflow_dispatch: {}      # run it by hand

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build updates.json via Python (NYC Council latest 50)
        run: |
          python - << 'PY'
          import json, sys, time, ssl, urllib.request

          def fetch_json(url):
            try:
              ctx = ssl.create_default_context()
              req = urllib.request.Request(
                url,
                headers={
                  "accept":"application/json",
                  "user-agent":"hr-law-updates/1.0 (+github actions)"
                }
              )
              with urllib.request.urlopen(req, context=ctx, timeout=40) as r:
                raw = r.read().decode("utf-8", errors="replace")
              return json.loads(raw)
            except Exception as e:
              print("Fetch error:", e, file=sys.stderr)
              return []

          # Pull most-recent 50 council matters
          url = "https://webapi.legistar.com/v1/nyc/Matters?$orderby=LastModifiedUtc%20desc&$top=50"
          data = fetch_json(url)
          if not isinstance(data, list):
            data = []

          now = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
          out = []
          for m in data:
            try:
              mid   = m.get("MatterId")
              title = m.get("MatterTitle") or m.get("MatterName") or m.get("MatterFile") or "NYC Council matter"
              date  = m.get("LastModifiedUtc") or m.get("MatterIntroDate") or now
              link  = m.get("MatterHyperlink") or f"https://legistar.council.nyc.gov/LegislationDetail.aspx?ID={mid}"
              out.append({
                "id":    f"nycc-{mid}",
                "source":"NYC Council",
                "title": title,
                "date":  date,
                "url":   link,
                "tags":  ["NYC"]
              })
            except Exception:
              pass

          try:
            with open("updates.json","w", encoding="utf-8") as f:
              json.dump(out, f, indent=2)
            print("Wrote updates.json with", len(out), "items")
          except Exception as e:
            print("Write error:", e, file=sys.stderr)
            with open("updates.json","w", encoding="utf-8") as f:
              json.dump([], f)
          PY

      - name: Commit updates.json if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add updates.json
            git commit -m "chore: update updates.json (python workflow)"
            git push
          else
            echo "No changes to commit."
          fi
