name: Build updates.json (Python, real data + debug)

on:
  schedule:
    - cron: "17 13 * * *"   # daily ~9:17am ET
  workflow_dispatch: {}      # run manually any time

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build updates.json via Python
        run: |
          python - << 'PY'
          import json, re, ssl, sys, time, os, urllib.request

          UA = ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/124.0.0.0 Safari/537.36")

          os.makedirs("debug", exist_ok=True)

          def fetch_text(url, accept="*/*", timeout=40):
            try:
              ctx = ssl.create_default_context()
              req = urllib.request.Request(url, headers={"accept": accept, "user-agent": UA})
              with urllib.request.urlopen(req, context=ctx, timeout=timeout) as r:
                raw = r.read().decode("utf-8", errors="replace")
              print(f"[fetch_text] {url} -> {len(raw)} bytes", flush=True)
              return raw
            except Exception as e:
              print(f"[fetch_text] ERROR {url}: {e}", file=sys.stderr, flush=True)
              return ""

          def fetch_json(url):
            try:
              raw = fetch_text(url, accept="application/json")
              with open("debug/nyc_council_raw.json", "w", encoding="utf-8") as f:
                f.write(raw)
              return json.loads(raw)
            except Exception as e:
              print(f"[fetch_json] ERROR {url}: {e}", file=sys.stderr, flush=True)
              return []

          def item(id, source, title, date, url, tags=None):
            return {
              "id": id,
              "source": source,
              "title": (title or "").strip()[:300],
              "date": date,
              "url": url,
              "tags": (tags or [])
            }

          # ---------- A) NYC Council (Legistar API) ----------
          def pull_nyc_council():
            # Be explicit about JSON format
            url = ("https://webapi.legistar.com/v1/nyc/Matters"
                   "?$orderby=LastModifiedUtc%20desc&$top=50&$format=json")
            data = fetch_json(url)
            out = []
            now = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
            if isinstance(data, list) and data:
              for m in data:
                try:
                  mid   = m.get("MatterId")
                  if mid is None:  # skip broken records
                    continue
                  title = (m.get("MatterTitle") or m.get("MatterName")
                           or m.get("MatterFile") or "NYC Council matter")
                  date  = m.get("LastModifiedUtc") or m.get("MatterIntroDate") or now
                  link  = m.get("MatterHyperlink") or f"https://legistar.council.nyc.gov/LegislationDetail.aspx?ID={mid}"
                  out.append(item(f"nycc-{mid}", "NYC Council", title, date, link, ["NYC"]))
                except Exception:
                  continue
            # write a slim debug preview so you can inspect results in the repo
            with open("debug/nyc_council_preview.json","w",encoding="utf-8") as f:
              json.dump(out[:5], f, indent=2)
            print(f"[NYC Council] {len(out)} items", flush=True)
            return out

          # ---------- B) NYC Rules (homepage scrape; heuristic) ----------
          def pull_nyc_rules():
            html = fetch_text("https://rules.cityofnewyork.us/")
            if not html:
              return []
            with open("debug/nyc_rules_raw.html","w",encoding="utf-8") as f:
              f.write(html[:20000])  # keep it small
            text = re.sub(r"<[^>]+>", " ", html)
            text = re.sub(r"\s+", " ", text).strip()
            chunks = re.split(r"(Proposed Rule|Adopted Rule|Notice of Public Hearing)", text)
            out, now = [], time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
            for i in range(1, min(len(chunks), 30), 2):
              head = chunks[i]
              body = chunks[i+1] if i+1 < len(chunks) else ""
              title = f"{head}: {body[:120]}…"
              out.append(item(f"nycr-{i}-{int(time.time())}", "NYC Rules", title, now,
                              "https://rules.cityofnewyork.us/", ["NYC","Rules"]))
            with open("debug/nyc_rules_preview.json","w",encoding="utf-8") as f:
              json.dump(out[:5], f, indent=2)
            print(f"[NYC Rules] {len(out)} items", flush=True)
            return out

          # ---------- C) NYS Register (landing page scrape; heuristic) ----------
          def pull_nys_register():
            html = fetch_text("https://dos.ny.gov/state-register")
            if not html:
              return []
            with open("debug/nys_register_raw.html","w",encoding="utf-8") as f:
              f.write(html[:20000])
            text = re.sub(r"<[^>]+>", " ", html)
            lines = [x.strip() for x in re.split(r"[\\n\\.]", text) if x.strip()]
            out, now = [], time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
            for line in lines:
              if re.search(r"(labor|employment|wage|salary|sick|leave|retaliation|schedule|minimum wage)", line, re.I):
                out.append(item(f"nysr-{len(out)}-{int(time.time())}", "NYS Register",
                                line[:140]+"…", now, "https://dos.ny.gov/state-register",
                                ["NYS","Rulemaking"]))
                if len(out) >= 10: break
            with open("debug/nys_register_preview.json","w",encoding="utf-8") as f:
              json.dump(out[:5], f, indent=2)
            print(f"[NYS Register] {len(out)} items", flush=True)
            return out

          # ---------- Aggregate ----------
          all_items = []
          try:   all_items += pull_nyc_council()
          except Exception as e: print("[agg] NYC Council failed:", e, file=sys.stderr, flush=True)
          try:   all_items += pull_nyc_rules()
          except Exception as e: print("[agg] NYC Rules failed:", e, file=sys.stderr, flush=True)
          try:   all_items += pull_nys_register()
          except Exception as e: print("[agg] NYS Register failed:", e, file=sys.stderr, flush=True)

          # De-dup by (source, title)
          seen, out = set(), []
          for it in all_items:
            key = (it["source"], it["title"])
            if key in seen: continue
            seen.add(key); out.append(it)

          # If still empty, keep examples so the site isn’t blank
          if not out:
            out = [
              {"id":"ex1","source":"NYC Council","title":"(Example) Amend Safe and Sick Time Act",
               "date":"2025-09-20","url":"https://council.nyc.gov/legislation/","tags":["NYC","Leave"]},
              {"id":"ex2","source":"NYC Rules","title":"(Example) Proposed payroll record rule",
               "date":"2025-09-18","url":"https://rules.cityofnewyork.us/","tags":["NYC","Records"]},
            ]
            print("[agg] No live items; wrote examples.", flush=True)

          # Sort (best effort)
          try:
            out.sort(key=lambda x: x.get("date",""), reverse=True)
          except Exception:
            pass

          with open("updates.json","w",encoding="utf-8") as f:
            json.dump(out, f, indent=2)
          print(f"[write] updates.json with {len(out)} items", flush=True)
          PY

      - name: Commit updates.json + debug if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add updates.json debug/*
            git commit -m "chore: update updates.json + debug artifacts"
            git push
          else
            echo "No changes to commit."
          fi
